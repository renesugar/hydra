<?php
/**
 * OAuth2Api
 * PHP version 5
 *
 * @category Class
 * @package  Hydra\SDK
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * ORY Hydra - Cloud Native OAuth 2.0 and OpenID Connect Server
 *
 * Welcome to the ORY Hydra HTTP API documentation. You will find documentation for all HTTP APIs here. Keep in mind that this document reflects the latest branch, always. Support for versioned documentation is coming in the future.
 *
 * OpenAPI spec version: Latest
 * Contact: hi@ory.am
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Hydra\SDK\Api;

use \Hydra\SDK\ApiClient;
use \Hydra\SDK\ApiException;
use \Hydra\SDK\Configuration;
use \Hydra\SDK\ObjectSerializer;

/**
 * OAuth2Api Class Doc Comment
 *
 * @category Class
 * @package  Hydra\SDK
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class OAuth2Api
{
    /**
     * API Client
     *
     * @var \Hydra\SDK\ApiClient instance of the ApiClient
     */
    protected $apiClient;

    /**
     * Constructor
     *
     * @param \Hydra\SDK\ApiClient|null $apiClient The api client to use
     */
    public function __construct(\Hydra\SDK\ApiClient $apiClient = null)
    {
        if ($apiClient === null) {
            $apiClient = new ApiClient();
        }

        $this->apiClient = $apiClient;
    }

    /**
     * Get API client
     *
     * @return \Hydra\SDK\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }

    /**
     * Set the API client
     *
     * @param \Hydra\SDK\ApiClient $apiClient set the API client
     *
     * @return OAuth2Api
     */
    public function setApiClient(\Hydra\SDK\ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }

    /**
     * Operation acceptConsentRequest
     *
     * Accept an consent request
     *
     * Client for Hydra
     *
     * @param string $challenge  (required)
     * @param \Hydra\SDK\Model\AcceptConsentRequest $body  (optional)
     * @throws \Hydra\SDK\ApiException on non-2xx response
     * @return \Hydra\SDK\Model\CompletedRequest
     */
    public function acceptConsentRequest($challenge, $body = null)
    {
        list($response) = $this->acceptConsentRequestWithHttpInfo($challenge, $body);
        return $response;
    }

    /**
     * Operation acceptConsentRequestWithHttpInfo
     *
     * Accept an consent request
     *
     * Client for Hydra
     *
     * @param string $challenge  (required)
     * @param \Hydra\SDK\Model\AcceptConsentRequest $body  (optional)
     * @throws \Hydra\SDK\ApiException on non-2xx response
     * @return array of \Hydra\SDK\Model\CompletedRequest, HTTP status code, HTTP response headers (array of strings)
     */
    public function acceptConsentRequestWithHttpInfo($challenge, $body = null)
    {
        // verify the required parameter 'challenge' is set
        if ($challenge === null) {
            throw new \InvalidArgumentException('Missing the required parameter $challenge when calling acceptConsentRequest');
        }
        // parse inputs
        $resourcePath = "/oauth2/auth/requests/consent/{challenge}/accept";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($challenge !== null) {
            $resourcePath = str_replace(
                "{" . "challenge" . "}",
                $this->apiClient->getSerializer()->toPathValue($challenge),
                $resourcePath
            );
        }
        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Hydra\SDK\Model\CompletedRequest',
                '/oauth2/auth/requests/consent/{challenge}/accept'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Hydra\SDK\Model\CompletedRequest', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Hydra\SDK\Model\CompletedRequest', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Hydra\SDK\Model\InlineResponse401', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Hydra\SDK\Model\InlineResponse401', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation acceptLoginRequest
     *
     * Accept an login request
     *
     * Client for Hydra
     *
     * @param string $challenge  (required)
     * @param \Hydra\SDK\Model\AcceptLoginRequest $body  (optional)
     * @throws \Hydra\SDK\ApiException on non-2xx response
     * @return \Hydra\SDK\Model\CompletedRequest
     */
    public function acceptLoginRequest($challenge, $body = null)
    {
        list($response) = $this->acceptLoginRequestWithHttpInfo($challenge, $body);
        return $response;
    }

    /**
     * Operation acceptLoginRequestWithHttpInfo
     *
     * Accept an login request
     *
     * Client for Hydra
     *
     * @param string $challenge  (required)
     * @param \Hydra\SDK\Model\AcceptLoginRequest $body  (optional)
     * @throws \Hydra\SDK\ApiException on non-2xx response
     * @return array of \Hydra\SDK\Model\CompletedRequest, HTTP status code, HTTP response headers (array of strings)
     */
    public function acceptLoginRequestWithHttpInfo($challenge, $body = null)
    {
        // verify the required parameter 'challenge' is set
        if ($challenge === null) {
            throw new \InvalidArgumentException('Missing the required parameter $challenge when calling acceptLoginRequest');
        }
        // parse inputs
        $resourcePath = "/oauth2/auth/requests/login/{challenge}/accept";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($challenge !== null) {
            $resourcePath = str_replace(
                "{" . "challenge" . "}",
                $this->apiClient->getSerializer()->toPathValue($challenge),
                $resourcePath
            );
        }
        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Hydra\SDK\Model\CompletedRequest',
                '/oauth2/auth/requests/login/{challenge}/accept'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Hydra\SDK\Model\CompletedRequest', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Hydra\SDK\Model\CompletedRequest', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Hydra\SDK\Model\InlineResponse401', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Hydra\SDK\Model\InlineResponse401', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation createOAuth2Client
     *
     * Create an OAuth 2.0 client
     *
     * Client for Hydra
     *
     * @param \Hydra\SDK\Model\OAuth2Client $body  (required)
     * @throws \Hydra\SDK\ApiException on non-2xx response
     * @return \Hydra\SDK\Model\OAuth2Client
     */
    public function createOAuth2Client($body)
    {
        list($response) = $this->createOAuth2ClientWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation createOAuth2ClientWithHttpInfo
     *
     * Create an OAuth 2.0 client
     *
     * Client for Hydra
     *
     * @param \Hydra\SDK\Model\OAuth2Client $body  (required)
     * @throws \Hydra\SDK\ApiException on non-2xx response
     * @return array of \Hydra\SDK\Model\OAuth2Client, HTTP status code, HTTP response headers (array of strings)
     */
    public function createOAuth2ClientWithHttpInfo($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling createOAuth2Client');
        }
        // parse inputs
        $resourcePath = "/clients";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Hydra\SDK\Model\OAuth2Client',
                '/clients'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Hydra\SDK\Model\OAuth2Client', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Hydra\SDK\Model\OAuth2Client', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Hydra\SDK\Model\InlineResponse401', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Hydra\SDK\Model\InlineResponse401', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Hydra\SDK\Model\InlineResponse401', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation deleteOAuth2Client
     *
     * Deletes an OAuth 2.0 Client
     *
     * Client for Hydra
     *
     * @param string $id The id of the OAuth 2.0 Client. (required)
     * @throws \Hydra\SDK\ApiException on non-2xx response
     * @return void
     */
    public function deleteOAuth2Client($id)
    {
        list($response) = $this->deleteOAuth2ClientWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation deleteOAuth2ClientWithHttpInfo
     *
     * Deletes an OAuth 2.0 Client
     *
     * Client for Hydra
     *
     * @param string $id The id of the OAuth 2.0 Client. (required)
     * @throws \Hydra\SDK\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteOAuth2ClientWithHttpInfo($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling deleteOAuth2Client');
        }
        // parse inputs
        $resourcePath = "/clients/{id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/clients/{id}'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 401:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Hydra\SDK\Model\InlineResponse401', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Hydra\SDK\Model\InlineResponse401', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Hydra\SDK\Model\InlineResponse401', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation flushInactiveOAuth2Tokens
     *
     * Flush Expired OAuth2 Access Tokens
     *
     * Client for Hydra
     *
     * @param \Hydra\SDK\Model\FlushInactiveOAuth2TokensRequest $body  (optional)
     * @throws \Hydra\SDK\ApiException on non-2xx response
     * @return void
     */
    public function flushInactiveOAuth2Tokens($body = null)
    {
        list($response) = $this->flushInactiveOAuth2TokensWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation flushInactiveOAuth2TokensWithHttpInfo
     *
     * Flush Expired OAuth2 Access Tokens
     *
     * Client for Hydra
     *
     * @param \Hydra\SDK\Model\FlushInactiveOAuth2TokensRequest $body  (optional)
     * @throws \Hydra\SDK\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function flushInactiveOAuth2TokensWithHttpInfo($body = null)
    {
        // parse inputs
        $resourcePath = "/oauth2/flush";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/oauth2/flush'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 401:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Hydra\SDK\Model\InlineResponse401', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Hydra\SDK\Model\InlineResponse401', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getConsentRequest
     *
     * Get consent request information
     *
     * Client for Hydra
     *
     * @param string $challenge  (required)
     * @throws \Hydra\SDK\ApiException on non-2xx response
     * @return \Hydra\SDK\Model\ConsentRequest
     */
    public function getConsentRequest($challenge)
    {
        list($response) = $this->getConsentRequestWithHttpInfo($challenge);
        return $response;
    }

    /**
     * Operation getConsentRequestWithHttpInfo
     *
     * Get consent request information
     *
     * Client for Hydra
     *
     * @param string $challenge  (required)
     * @throws \Hydra\SDK\ApiException on non-2xx response
     * @return array of \Hydra\SDK\Model\ConsentRequest, HTTP status code, HTTP response headers (array of strings)
     */
    public function getConsentRequestWithHttpInfo($challenge)
    {
        // verify the required parameter 'challenge' is set
        if ($challenge === null) {
            throw new \InvalidArgumentException('Missing the required parameter $challenge when calling getConsentRequest');
        }
        // parse inputs
        $resourcePath = "/oauth2/auth/requests/consent/{challenge}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($challenge !== null) {
            $resourcePath = str_replace(
                "{" . "challenge" . "}",
                $this->apiClient->getSerializer()->toPathValue($challenge),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Hydra\SDK\Model\ConsentRequest',
                '/oauth2/auth/requests/consent/{challenge}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Hydra\SDK\Model\ConsentRequest', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Hydra\SDK\Model\ConsentRequest', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Hydra\SDK\Model\InlineResponse401', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Hydra\SDK\Model\InlineResponse401', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getLoginRequest
     *
     * Get an login request
     *
     * Client for Hydra
     *
     * @param string $challenge  (required)
     * @throws \Hydra\SDK\ApiException on non-2xx response
     * @return \Hydra\SDK\Model\LoginRequest
     */
    public function getLoginRequest($challenge)
    {
        list($response) = $this->getLoginRequestWithHttpInfo($challenge);
        return $response;
    }

    /**
     * Operation getLoginRequestWithHttpInfo
     *
     * Get an login request
     *
     * Client for Hydra
     *
     * @param string $challenge  (required)
     * @throws \Hydra\SDK\ApiException on non-2xx response
     * @return array of \Hydra\SDK\Model\LoginRequest, HTTP status code, HTTP response headers (array of strings)
     */
    public function getLoginRequestWithHttpInfo($challenge)
    {
        // verify the required parameter 'challenge' is set
        if ($challenge === null) {
            throw new \InvalidArgumentException('Missing the required parameter $challenge when calling getLoginRequest');
        }
        // parse inputs
        $resourcePath = "/oauth2/auth/requests/login/{challenge}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($challenge !== null) {
            $resourcePath = str_replace(
                "{" . "challenge" . "}",
                $this->apiClient->getSerializer()->toPathValue($challenge),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Hydra\SDK\Model\LoginRequest',
                '/oauth2/auth/requests/login/{challenge}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Hydra\SDK\Model\LoginRequest', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Hydra\SDK\Model\LoginRequest', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Hydra\SDK\Model\InlineResponse401', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Hydra\SDK\Model\InlineResponse401', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getOAuth2Client
     *
     * Get an OAuth 2.0 Client.
     *
     * Client for Hydra
     *
     * @param string $id The id of the OAuth 2.0 Client. (required)
     * @throws \Hydra\SDK\ApiException on non-2xx response
     * @return \Hydra\SDK\Model\OAuth2Client
     */
    public function getOAuth2Client($id)
    {
        list($response) = $this->getOAuth2ClientWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation getOAuth2ClientWithHttpInfo
     *
     * Get an OAuth 2.0 Client.
     *
     * Client for Hydra
     *
     * @param string $id The id of the OAuth 2.0 Client. (required)
     * @throws \Hydra\SDK\ApiException on non-2xx response
     * @return array of \Hydra\SDK\Model\OAuth2Client, HTTP status code, HTTP response headers (array of strings)
     */
    public function getOAuth2ClientWithHttpInfo($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling getOAuth2Client');
        }
        // parse inputs
        $resourcePath = "/clients/{id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Hydra\SDK\Model\OAuth2Client',
                '/clients/{id}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Hydra\SDK\Model\OAuth2Client', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Hydra\SDK\Model\OAuth2Client', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Hydra\SDK\Model\InlineResponse401', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Hydra\SDK\Model\InlineResponse401', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Hydra\SDK\Model\InlineResponse401', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getWellKnown
     *
     * Server well known configuration
     *
     * Client for Hydra
     *
     * @throws \Hydra\SDK\ApiException on non-2xx response
     * @return \Hydra\SDK\Model\WellKnown
     */
    public function getWellKnown()
    {
        list($response) = $this->getWellKnownWithHttpInfo();
        return $response;
    }

    /**
     * Operation getWellKnownWithHttpInfo
     *
     * Server well known configuration
     *
     * Client for Hydra
     *
     * @throws \Hydra\SDK\ApiException on non-2xx response
     * @return array of \Hydra\SDK\Model\WellKnown, HTTP status code, HTTP response headers (array of strings)
     */
    public function getWellKnownWithHttpInfo()
    {
        // parse inputs
        $resourcePath = "/.well-known/openid-configuration";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json', 'application/x-www-form-urlencoded']);


        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Hydra\SDK\Model\WellKnown',
                '/.well-known/openid-configuration'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Hydra\SDK\Model\WellKnown', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Hydra\SDK\Model\WellKnown', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Hydra\SDK\Model\InlineResponse401', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Hydra\SDK\Model\InlineResponse401', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation introspectOAuth2Token
     *
     * Introspect OAuth2 tokens
     *
     * Client for Hydra
     *
     * @param string $token The string value of the token. For access tokens, this is the \&quot;access_token\&quot; value returned from the token endpoint defined in OAuth 2.0 [RFC6749], Section 5.1. This endpoint DOES NOT accept refresh tokens for validation. (required)
     * @param string $scope An optional, space separated list of required scopes. If the access token was not granted one of the scopes, the result of active will be false. (optional)
     * @throws \Hydra\SDK\ApiException on non-2xx response
     * @return \Hydra\SDK\Model\OAuth2TokenIntrospection
     */
    public function introspectOAuth2Token($token, $scope = null)
    {
        list($response) = $this->introspectOAuth2TokenWithHttpInfo($token, $scope);
        return $response;
    }

    /**
     * Operation introspectOAuth2TokenWithHttpInfo
     *
     * Introspect OAuth2 tokens
     *
     * Client for Hydra
     *
     * @param string $token The string value of the token. For access tokens, this is the \&quot;access_token\&quot; value returned from the token endpoint defined in OAuth 2.0 [RFC6749], Section 5.1. This endpoint DOES NOT accept refresh tokens for validation. (required)
     * @param string $scope An optional, space separated list of required scopes. If the access token was not granted one of the scopes, the result of active will be false. (optional)
     * @throws \Hydra\SDK\ApiException on non-2xx response
     * @return array of \Hydra\SDK\Model\OAuth2TokenIntrospection, HTTP status code, HTTP response headers (array of strings)
     */
    public function introspectOAuth2TokenWithHttpInfo($token, $scope = null)
    {
        // verify the required parameter 'token' is set
        if ($token === null) {
            throw new \InvalidArgumentException('Missing the required parameter $token when calling introspectOAuth2Token');
        }
        // parse inputs
        $resourcePath = "/oauth2/introspect";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/x-www-form-urlencoded']);

        // form params
        if ($token !== null) {
            $formParams['token'] = $this->apiClient->getSerializer()->toFormValue($token);
        }
        // form params
        if ($scope !== null) {
            $formParams['scope'] = $this->apiClient->getSerializer()->toFormValue($scope);
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Hydra\SDK\Model\OAuth2TokenIntrospection',
                '/oauth2/introspect'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Hydra\SDK\Model\OAuth2TokenIntrospection', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Hydra\SDK\Model\OAuth2TokenIntrospection', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Hydra\SDK\Model\InlineResponse401', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Hydra\SDK\Model\InlineResponse401', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation listOAuth2Clients
     *
     * List OAuth 2.0 Clients
     *
     * Client for Hydra
     *
     * @param int $limit The maximum amount of policies returned. (optional)
     * @param int $offset The offset from where to start looking. (optional)
     * @throws \Hydra\SDK\ApiException on non-2xx response
     * @return \Hydra\SDK\Model\OAuth2Client[]
     */
    public function listOAuth2Clients($limit = null, $offset = null)
    {
        list($response) = $this->listOAuth2ClientsWithHttpInfo($limit, $offset);
        return $response;
    }

    /**
     * Operation listOAuth2ClientsWithHttpInfo
     *
     * List OAuth 2.0 Clients
     *
     * Client for Hydra
     *
     * @param int $limit The maximum amount of policies returned. (optional)
     * @param int $offset The offset from where to start looking. (optional)
     * @throws \Hydra\SDK\ApiException on non-2xx response
     * @return array of \Hydra\SDK\Model\OAuth2Client[], HTTP status code, HTTP response headers (array of strings)
     */
    public function listOAuth2ClientsWithHttpInfo($limit = null, $offset = null)
    {
        // parse inputs
        $resourcePath = "/clients";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if ($limit !== null) {
            $queryParams['limit'] = $this->apiClient->getSerializer()->toQueryValue($limit);
        }
        // query params
        if ($offset !== null) {
            $queryParams['offset'] = $this->apiClient->getSerializer()->toQueryValue($offset);
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Hydra\SDK\Model\OAuth2Client[]',
                '/clients'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Hydra\SDK\Model\OAuth2Client[]', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Hydra\SDK\Model\OAuth2Client[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Hydra\SDK\Model\InlineResponse401', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Hydra\SDK\Model\InlineResponse401', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Hydra\SDK\Model\InlineResponse401', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation oauthAuth
     *
     * The OAuth 2.0 authorize endpoint
     *
     * Client for Hydra
     *
     * @throws \Hydra\SDK\ApiException on non-2xx response
     * @return void
     */
    public function oauthAuth()
    {
        list($response) = $this->oauthAuthWithHttpInfo();
        return $response;
    }

    /**
     * Operation oauthAuthWithHttpInfo
     *
     * The OAuth 2.0 authorize endpoint
     *
     * Client for Hydra
     *
     * @throws \Hydra\SDK\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function oauthAuthWithHttpInfo()
    {
        // parse inputs
        $resourcePath = "/oauth2/auth";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/x-www-form-urlencoded']);


        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/oauth2/auth'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 401:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Hydra\SDK\Model\InlineResponse401', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Hydra\SDK\Model\InlineResponse401', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation oauthToken
     *
     * The OAuth 2.0 token endpoint
     *
     * Client for Hydra
     *
     * @throws \Hydra\SDK\ApiException on non-2xx response
     * @return \Hydra\SDK\Model\OauthTokenResponse
     */
    public function oauthToken()
    {
        list($response) = $this->oauthTokenWithHttpInfo();
        return $response;
    }

    /**
     * Operation oauthTokenWithHttpInfo
     *
     * The OAuth 2.0 token endpoint
     *
     * Client for Hydra
     *
     * @throws \Hydra\SDK\ApiException on non-2xx response
     * @return array of \Hydra\SDK\Model\OauthTokenResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function oauthTokenWithHttpInfo()
    {
        // parse inputs
        $resourcePath = "/oauth2/token";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/x-www-form-urlencoded']);


        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Hydra\SDK\Model\OauthTokenResponse',
                '/oauth2/token'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Hydra\SDK\Model\OauthTokenResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Hydra\SDK\Model\OauthTokenResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Hydra\SDK\Model\InlineResponse401', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Hydra\SDK\Model\InlineResponse401', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation rejectConsentRequest
     *
     * Reject an consent request
     *
     * Client for Hydra
     *
     * @param string $challenge  (required)
     * @param \Hydra\SDK\Model\RejectRequest $body  (optional)
     * @throws \Hydra\SDK\ApiException on non-2xx response
     * @return \Hydra\SDK\Model\CompletedRequest
     */
    public function rejectConsentRequest($challenge, $body = null)
    {
        list($response) = $this->rejectConsentRequestWithHttpInfo($challenge, $body);
        return $response;
    }

    /**
     * Operation rejectConsentRequestWithHttpInfo
     *
     * Reject an consent request
     *
     * Client for Hydra
     *
     * @param string $challenge  (required)
     * @param \Hydra\SDK\Model\RejectRequest $body  (optional)
     * @throws \Hydra\SDK\ApiException on non-2xx response
     * @return array of \Hydra\SDK\Model\CompletedRequest, HTTP status code, HTTP response headers (array of strings)
     */
    public function rejectConsentRequestWithHttpInfo($challenge, $body = null)
    {
        // verify the required parameter 'challenge' is set
        if ($challenge === null) {
            throw new \InvalidArgumentException('Missing the required parameter $challenge when calling rejectConsentRequest');
        }
        // parse inputs
        $resourcePath = "/oauth2/auth/requests/consent/{challenge}/reject";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($challenge !== null) {
            $resourcePath = str_replace(
                "{" . "challenge" . "}",
                $this->apiClient->getSerializer()->toPathValue($challenge),
                $resourcePath
            );
        }
        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Hydra\SDK\Model\CompletedRequest',
                '/oauth2/auth/requests/consent/{challenge}/reject'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Hydra\SDK\Model\CompletedRequest', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Hydra\SDK\Model\CompletedRequest', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Hydra\SDK\Model\InlineResponse401', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Hydra\SDK\Model\InlineResponse401', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation rejectLoginRequest
     *
     * Reject an logout request
     *
     * Client for Hydra
     *
     * @param string $challenge  (required)
     * @param \Hydra\SDK\Model\RejectRequest $body  (optional)
     * @throws \Hydra\SDK\ApiException on non-2xx response
     * @return \Hydra\SDK\Model\CompletedRequest
     */
    public function rejectLoginRequest($challenge, $body = null)
    {
        list($response) = $this->rejectLoginRequestWithHttpInfo($challenge, $body);
        return $response;
    }

    /**
     * Operation rejectLoginRequestWithHttpInfo
     *
     * Reject an logout request
     *
     * Client for Hydra
     *
     * @param string $challenge  (required)
     * @param \Hydra\SDK\Model\RejectRequest $body  (optional)
     * @throws \Hydra\SDK\ApiException on non-2xx response
     * @return array of \Hydra\SDK\Model\CompletedRequest, HTTP status code, HTTP response headers (array of strings)
     */
    public function rejectLoginRequestWithHttpInfo($challenge, $body = null)
    {
        // verify the required parameter 'challenge' is set
        if ($challenge === null) {
            throw new \InvalidArgumentException('Missing the required parameter $challenge when calling rejectLoginRequest');
        }
        // parse inputs
        $resourcePath = "/oauth2/auth/requests/login/{challenge}/reject";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($challenge !== null) {
            $resourcePath = str_replace(
                "{" . "challenge" . "}",
                $this->apiClient->getSerializer()->toPathValue($challenge),
                $resourcePath
            );
        }
        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Hydra\SDK\Model\CompletedRequest',
                '/oauth2/auth/requests/login/{challenge}/reject'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Hydra\SDK\Model\CompletedRequest', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Hydra\SDK\Model\CompletedRequest', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Hydra\SDK\Model\InlineResponse401', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Hydra\SDK\Model\InlineResponse401', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation revokeOAuth2Token
     *
     * Revoke OAuth2 tokens
     *
     * Client for Hydra
     *
     * @param string $token  (required)
     * @throws \Hydra\SDK\ApiException on non-2xx response
     * @return void
     */
    public function revokeOAuth2Token($token)
    {
        list($response) = $this->revokeOAuth2TokenWithHttpInfo($token);
        return $response;
    }

    /**
     * Operation revokeOAuth2TokenWithHttpInfo
     *
     * Revoke OAuth2 tokens
     *
     * Client for Hydra
     *
     * @param string $token  (required)
     * @throws \Hydra\SDK\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function revokeOAuth2TokenWithHttpInfo($token)
    {
        // verify the required parameter 'token' is set
        if ($token === null) {
            throw new \InvalidArgumentException('Missing the required parameter $token when calling revokeOAuth2Token');
        }
        // parse inputs
        $resourcePath = "/oauth2/revoke";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/x-www-form-urlencoded']);

        // form params
        if ($token !== null) {
            $formParams['token'] = $this->apiClient->getSerializer()->toFormValue($token);
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/oauth2/revoke'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 401:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Hydra\SDK\Model\InlineResponse401', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Hydra\SDK\Model\InlineResponse401', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation updateOAuth2Client
     *
     * Update an OAuth 2.0 Client
     *
     * Client for Hydra
     *
     * @param string $id  (required)
     * @param \Hydra\SDK\Model\OAuth2Client $body  (required)
     * @throws \Hydra\SDK\ApiException on non-2xx response
     * @return \Hydra\SDK\Model\OAuth2Client
     */
    public function updateOAuth2Client($id, $body)
    {
        list($response) = $this->updateOAuth2ClientWithHttpInfo($id, $body);
        return $response;
    }

    /**
     * Operation updateOAuth2ClientWithHttpInfo
     *
     * Update an OAuth 2.0 Client
     *
     * Client for Hydra
     *
     * @param string $id  (required)
     * @param \Hydra\SDK\Model\OAuth2Client $body  (required)
     * @throws \Hydra\SDK\ApiException on non-2xx response
     * @return array of \Hydra\SDK\Model\OAuth2Client, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateOAuth2ClientWithHttpInfo($id, $body)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling updateOAuth2Client');
        }
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling updateOAuth2Client');
        }
        // parse inputs
        $resourcePath = "/clients/{id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Hydra\SDK\Model\OAuth2Client',
                '/clients/{id}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Hydra\SDK\Model\OAuth2Client', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Hydra\SDK\Model\OAuth2Client', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Hydra\SDK\Model\InlineResponse401', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Hydra\SDK\Model\InlineResponse401', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Hydra\SDK\Model\InlineResponse401', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation userinfo
     *
     * OpenID Connect Userinfo
     *
     * Client for Hydra
     *
     * @throws \Hydra\SDK\ApiException on non-2xx response
     * @return \Hydra\SDK\Model\UserinfoResponse
     */
    public function userinfo()
    {
        list($response) = $this->userinfoWithHttpInfo();
        return $response;
    }

    /**
     * Operation userinfoWithHttpInfo
     *
     * OpenID Connect Userinfo
     *
     * Client for Hydra
     *
     * @throws \Hydra\SDK\ApiException on non-2xx response
     * @return array of \Hydra\SDK\Model\UserinfoResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function userinfoWithHttpInfo()
    {
        // parse inputs
        $resourcePath = "/userinfo";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json', 'application/x-www-form-urlencoded']);


        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Hydra\SDK\Model\UserinfoResponse',
                '/userinfo'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Hydra\SDK\Model\UserinfoResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Hydra\SDK\Model\UserinfoResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Hydra\SDK\Model\InlineResponse401', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Hydra\SDK\Model\InlineResponse401', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation wellKnown
     *
     * Get Well-Known JSON Web Keys
     *
     * Client for Hydra
     *
     * @throws \Hydra\SDK\ApiException on non-2xx response
     * @return \Hydra\SDK\Model\JsonWebKeySet
     */
    public function wellKnown()
    {
        list($response) = $this->wellKnownWithHttpInfo();
        return $response;
    }

    /**
     * Operation wellKnownWithHttpInfo
     *
     * Get Well-Known JSON Web Keys
     *
     * Client for Hydra
     *
     * @throws \Hydra\SDK\ApiException on non-2xx response
     * @return array of \Hydra\SDK\Model\JsonWebKeySet, HTTP status code, HTTP response headers (array of strings)
     */
    public function wellKnownWithHttpInfo()
    {
        // parse inputs
        $resourcePath = "/.well-known/jwks.json";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);


        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Hydra\SDK\Model\JsonWebKeySet',
                '/.well-known/jwks.json'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Hydra\SDK\Model\JsonWebKeySet', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Hydra\SDK\Model\JsonWebKeySet', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Hydra\SDK\Model\InlineResponse401', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Hydra\SDK\Model\InlineResponse401', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Hydra\SDK\Model\InlineResponse401', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }
}
